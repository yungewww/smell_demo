{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Qixolw0zpEov","executionInfo":{"status":"ok","timestamp":1742255161685,"user_tz":240,"elapsed":13307,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import pandas as pd\n","import os\n","import numpy as np"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-Q58sK5ufcs","executionInfo":{"status":"ok","timestamp":1742255375917,"user_tz":240,"elapsed":15891,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"21631e59-a5c4-4c0c-9854-e706a540543d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["class GCMSDataEncoder(nn.Module):\n","    def __init__(self, input_dim, hidden_dim=128, output_dim=16):\n","        super().__init__()\n","        self.fc1 = nn.Linear(input_dim, hidden_dim)\n","        self.fc2 = nn.Linear(hidden_dim, hidden_dim)\n","\n","        self.fc3 = nn.Linear(hidden_dim, hidden_dim)\n","        self.fc4 = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = self.fc4(x)\n","        return x"],"metadata":{"id":"GpiGCpBNtfJv","executionInfo":{"status":"ok","timestamp":1742255381247,"user_tz":240,"elapsed":2,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["class SensorDataEncoder(nn.Module):\n","    def __init__(self, input_dim, hidden_dim=128, output_dim=16):\n","        super().__init__()\n","        self.fc1 = nn.Linear(input_dim, hidden_dim)\n","        self.fc2 = nn.Linear(hidden_dim, hidden_dim)\n","\n","        self.fc3 = nn.Linear(hidden_dim, hidden_dim)\n","        self.fc4 = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = self.fc4(x)\n","        return x"],"metadata":{"id":"tAwYPkQHtgwm","executionInfo":{"status":"ok","timestamp":1742255383809,"user_tz":240,"elapsed":5,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# load model\n","gcms_model_path = \"/content/drive/My Drive/Smell/Contrastive Learning/gcms_encoder.pt\"\n","sensor_model_path = \"/content/drive/My Drive/Smell/Contrastive Learning/sensor_encoder.pt\"\n","\n","hidden_dim = 128\n","embedding_dim = 16\n","\n","gcms_encoder = GCMSDataEncoder(10, hidden_dim, embedding_dim)\n","sensor_encoder = SensorDataEncoder(13, hidden_dim, embedding_dim)\n","\n","gcms_encoder.load_state_dict(torch.load(gcms_model_path))\n","sensor_encoder.load_state_dict(torch.load(sensor_model_path))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NxID2vfythu3","executionInfo":{"status":"ok","timestamp":1742255386926,"user_tz":240,"elapsed":1133,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"5468ca81-2658-49a1-d288-a5f3c04c0065"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# uploading gcms data\n","df = pd.read_csv(\"/content/drive/My Drive/Smell/Contrastive Learning/gcms_dataframe.csv\")\n","\n","# adding ambient to the df\n","ambient_row = pd.DataFrame([{'food_name': \"ambient\", 'C': 0, \"Ca\": 0, \"H\": 0, \"K\": 0, \"Mg\": 0, \"N\": 0, \"Na\":0, \"O\": 0, \"P\": 0, \"Se\":0,}])\n","\n","df = pd.concat([df, ambient_row], ignore_index=True)"],"metadata":{"id":"epOL2MD2vAIV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# getting rid of names and keeping only numerical values\n","df_dropped = df.drop(columns=[\"food_name\"], errors=\"ignore\")\n","\n","gcms_data = df_dropped.values"],"metadata":{"id":"s9IXg2BtvAmw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["available_food_names = df[\"food_name\"].to_list()\n","\n","ix_to_name = {i: name for i, name in enumerate(available_food_names)}\n","name_to_ix = {name: i for i, name in enumerate(available_food_names)}"],"metadata":{"id":"KAvTDxIyurJl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","\n","def evaluate_retrieval(smell_matrix, gcms_data, gcms_encoder, sensor_encoder, device='cpu'):\n","    gcms_encoder.eval()\n","    sensor_encoder.eval()\n","\n","    smell_matrix = torch.tensor(smell_matrix, dtype=torch.float)\n","    gcms_data = torch.tensor(gcms_data, dtype=torch.float)\n","\n","    all_z_gcms = []\n","    all_z_sensor = []\n","\n","    with torch.no_grad():\n","        gcms_data = gcms_data.to(device)\n","        smell_matrix = smell_matrix.to(device)\n","\n","        z_gcms = gcms_encoder(gcms_data) # (15 x 16)\n","        z_sensor = sensor_encoder(smell_matrix) # (n x 16)\n","\n","        # L2 normalize if thatâ€™s how your model was trained\n","        z_gcms = F.normalize(z_gcms, dim=1)\n","        z_sensor = F.normalize(z_sensor, dim=1)\n","\n","        all_z_gcms.append(z_gcms)\n","        all_z_sensor.append(z_sensor)\n","\n","    # Concatenate all batches\n","    all_z_gcms = torch.cat(all_z_gcms, dim=0)     # [N, embed_dim]\n","    all_z_sensor = torch.cat(all_z_sensor, dim=0) # [N, embed_dim]\n","\n","    # Compute similarity matrix: shape [N, N]\n","    # sim[i, j] = dot( z_gcms[i], z_sensor[j] )\n","    sim = torch.matmul(all_z_sensor, all_z_gcms.t()) # (n x 15)\n","\n","    # For each row i, find the column j with the highest similarity\n","    # If j == i, it means we matched the correct sensor embedding\n","    predicted = sim.argmax(dim=1)  # [N]\n","\n","    return predicted.tolist()\n"],"metadata":{"id":"jmXKjxVOu2WP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["smell_matrix = np.zeros((1, 13), dtype=float) # TODO collected smell matrix\n","\n","predicted_from_smell = evaluate_retrieval(smell_matrix, gcms_data, gcms_encoder, sensor_encoder)\n","\n","print([ix_to_name[ix] for ix in predicted_from_smell])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TCzku82uvece","executionInfo":{"status":"ok","timestamp":1741633594893,"user_tz":240,"elapsed":79,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"b779769f-7c19-40e9-a74b-15972ea6e9f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['ambient']\n"]}]}]}