{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOlSBL3kGNtQOqEJwl1GOqB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":285,"metadata":{"id":"N3TAvKlZ-HKD","executionInfo":{"status":"ok","timestamp":1742581046970,"user_tz":240,"elapsed":4,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import pandas as pd\n","import os\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler"]},{"cell_type":"code","source":["class GCMSDataEncoder(nn.Module):\n","    def __init__(self, input_dim, hidden_dim=128, output_dim=16):\n","        super().__init__()\n","        self.fc1 = nn.Linear(input_dim, hidden_dim)\n","        self.fc2 = nn.Linear(hidden_dim, hidden_dim)\n","\n","        self.fc3 = nn.Linear(hidden_dim, hidden_dim)\n","        self.fc4 = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = self.fc4(x)\n","        return x"],"metadata":{"id":"9faV12yy_CzH","executionInfo":{"status":"ok","timestamp":1742581046992,"user_tz":240,"elapsed":17,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":286,"outputs":[]},{"cell_type":"code","source":["class SensorDataEncoder(nn.Module):\n","    def __init__(self, input_dim, hidden_dim=128, output_dim=16):\n","        super().__init__()\n","        self.fc1 = nn.Linear(input_dim, hidden_dim)\n","        self.fc2 = nn.Linear(hidden_dim, hidden_dim)\n","\n","        self.fc3 = nn.Linear(hidden_dim, hidden_dim)\n","        self.fc4 = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = self.fc4(x)\n","        return x"],"metadata":{"id":"tb3L_ew0_LU5","executionInfo":{"status":"ok","timestamp":1742581047002,"user_tz":240,"elapsed":11,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":287,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qFw6fjstFswf","executionInfo":{"status":"ok","timestamp":1742581047651,"user_tz":240,"elapsed":649,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"caefe00e-f67d-4031-851b-070e4b2fc935"},"execution_count":288,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# uploading gcms data\n","df = pd.read_csv(\"/content/drive/My Drive/Smell/Contrastive Learning/gcms_dataframe.csv\")\n","\n","# adding ambient to the df\n","ambient_row = pd.DataFrame([{'food_name': \"ambient\", 'C': 0.04, \"Ca\": 0, \"H\": 0.00005, \"K\": 0, \"Mg\": 0, \"N\": 78.08, \"Na\":0, \"O\": 20.95, \"P\": 0, \"Se\":0,}])\n","\n","df = pd.concat([df, ambient_row], ignore_index=True)"],"metadata":{"id":"GTn2gxPQGC3Q","executionInfo":{"status":"ok","timestamp":1742581047651,"user_tz":240,"elapsed":2,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":289,"outputs":[]},{"cell_type":"code","source":["# getting rid of names and keeping only numerical values\n","df_dropped = df.drop(columns=[\"food_name\"], errors=\"ignore\")\n","\n","gcms_data = df_dropped.values"],"metadata":{"id":"TOMmdd0uY4Mx","executionInfo":{"status":"ok","timestamp":1742581047652,"user_tz":240,"elapsed":3,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":290,"outputs":[]},{"cell_type":"code","source":["available_food_names = df[\"food_name\"].to_list()\n","\n","ix_to_name = {i: name for i, name in enumerate(available_food_names)}\n","name_to_ix = {name: i for i, name in enumerate(available_food_names)}"],"metadata":{"id":"7RhJk4G5xgWI","executionInfo":{"status":"ok","timestamp":1742581047653,"user_tz":240,"elapsed":1,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":291,"outputs":[]},{"cell_type":"code","source":["available_food_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWCOGCFzXK1l","executionInfo":{"status":"ok","timestamp":1742581047655,"user_tz":240,"elapsed":2,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"3ce3fae4-e1b8-45b8-8958-e59edce7c4d8"},"execution_count":292,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['apple_juice',\n"," 'basil',\n"," 'black_pepper',\n"," 'chicken_stock',\n"," 'chili_powder',\n"," 'cloves',\n"," 'coffee_beans',\n"," 'cumin',\n"," 'garlic_powder',\n"," 'mint_leaves',\n"," 'nutmeg',\n"," 'onion_powder',\n"," 'oregano',\n"," 'paprika',\n"," 'peanut_butter',\n"," 'ambient']"]},"metadata":{},"execution_count":292}]},{"cell_type":"code","source":["# loading smell sensor data\n","smell_data_path = \"/content/drive/My Drive/Smell/smell_data_switch\"\n","\n","paths = []\n","\n","for file in os.listdir(smell_data_path):\n","    file_path = os.path.join(smell_data_path, file)\n","    food_name = file.split(\".\")[0]\n","\n","    if food_name in available_food_names:\n","        paths.append(file_path)"],"metadata":{"id":"uza_H9mrncK8","executionInfo":{"status":"ok","timestamp":1742581047668,"user_tz":240,"elapsed":12,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":293,"outputs":[]},{"cell_type":"code","source":["def create_state_average_df(df):\n","    df['Group'] = (df['State'] != df['State'].shift()).cumsum()\n","\n","    averaged_df = df.groupby('Group').mean().reset_index()\n","\n","    averaged_df['State'] = df.groupby('Group')['State'].first().values\n","\n","    averaged_df = averaged_df.drop(columns=['Group'])\n","\n","    averaged_df = averaged_df[averaged_df[\"State\"] < 2]\n","    averaged_df.reset_index(drop=True)\n","    return averaged_df"],"metadata":{"id":"SJ_ogNJ-Wu1Z","executionInfo":{"status":"ok","timestamp":1742581047698,"user_tz":240,"elapsed":30,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":294,"outputs":[]},{"cell_type":"code","source":["def calculate_state_difference(df):\n","    # Check if the first row's state is not 1 and remove it if true\n","    if df.iloc[0]['State'] != 1:\n","        df = df.iloc[1:].reset_index(drop=True)\n","\n","    # Ensure the DataFrame has an even number of rows\n","    if len(df) % 2 != 0:\n","        df = df[:-1]\n","\n","    # Calculate the difference between odd and even rows\n","    odd_rows = df.iloc[1::2].reset_index(drop=True)\n","    even_rows = df.iloc[0::2].reset_index(drop=True)\n","\n","    result = odd_rows - even_rows\n","    return result"],"metadata":{"id":"nloc7XVgZmAX","executionInfo":{"status":"ok","timestamp":1742581047699,"user_tz":240,"elapsed":21,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":295,"outputs":[]},{"cell_type":"code","source":["from collections import defaultdict\n","import re\n","\n","ingredient_df = []\n","\n","for path in paths:\n","    ingredient_name = re.split(r'[./]', path)[-3]\n","\n","    dataframe = pd.read_csv(path)\n","    if dataframe.shape[1] > 14:\n","        dataframe = dataframe[dataframe.columns[:14]]\n","    dataframe.drop(columns=\"timestamp\", inplace=True)\n","    dataframe.rename(columns={dataframe.columns[-1]: \"State\"}, inplace=True)\n","    avg_ingredient_df = create_state_average_df(dataframe)\n","    diff_ingredient_df = calculate_state_difference(avg_ingredient_df)\n","\n","    diff_ingredient_df[\"label\"] = name_to_ix[ingredient_name]\n","    ingredient_df.append(diff_ingredient_df)"],"metadata":{"id":"H67US7d9Znah","executionInfo":{"status":"ok","timestamp":1742581048254,"user_tz":240,"elapsed":556,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":296,"outputs":[]},{"cell_type":"code","source":["combined_df = pd.concat(ingredient_df, axis=0, ignore_index=True)"],"metadata":{"id":"22lSe04HZpSB","executionInfo":{"status":"ok","timestamp":1742581048261,"user_tz":240,"elapsed":7,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":297,"outputs":[]},{"cell_type":"code","source":["columns_to_normalize = combined_df.columns[:13]"],"metadata":{"id":"d5Ea1a2pp1cc","executionInfo":{"status":"ok","timestamp":1742581048261,"user_tz":240,"elapsed":1,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":298,"outputs":[]},{"cell_type":"code","source":["def filter_outliers(group):\n","    numerical_columns = group.select_dtypes(include=[np.number]).columns\n","    for col in numerical_columns:\n","        Q1 = group[col].quantile(0.25)\n","        Q3 = group[col].quantile(0.75)\n","        IQR = Q3 - Q1\n","        lower_bound = Q1 - 1.5 * IQR\n","        upper_bound = Q3 + 1.5 * IQR\n","        group = group[(group[col] >= lower_bound) & (group[col] <= upper_bound)]\n","    return group\n","\n","# Group by 'Label' and filter outliers within each group\n","filtered_groups = combined_df.groupby('label').apply(filter_outliers).reset_index(drop=True)\n","\n","print(\"Filtered DataFrame:\")\n","print(filtered_groups)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kwtgf7Rg-PCh","executionInfo":{"status":"ok","timestamp":1742581048625,"user_tz":240,"elapsed":365,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"5a536a32-2018-4eeb-89cc-dfd8b1c7755e"},"execution_count":299,"outputs":[{"output_type":"stream","name":"stdout","text":["Filtered DataFrame:\n","         NO2    C2H50H       VOC         CO  Alcohol       LPG  Benzene  \\\n","0  -0.277093  0.368772  0.729584  -1.967899      0.0  0.001284      0.0   \n","1   0.095519  0.202623  0.525902 -11.605246      0.0 -0.040000      0.0   \n","2  -0.248254 -0.097778 -0.161270  -9.308571      0.0 -0.011746      0.0   \n","3   0.534161  0.319255  1.023602  -3.534783      0.0  0.006211      0.0   \n","4  -0.398214 -0.058929 -0.525000  -6.542857      0.0  0.007143      0.0   \n","..       ...       ...       ...        ...      ...       ...      ...   \n","95 -0.446589 -0.234796 -0.406663  -0.864886      0.0 -0.230566      0.0   \n","96 -0.320690  0.036782 -0.214943   0.286782      0.0 -0.017241      0.0   \n","97 -0.519231 -0.166667 -0.275641  -0.089744      0.0 -0.380769      0.0   \n","98  0.029240 -0.291562 -0.338346  -0.383459      0.0 -0.102757      0.0   \n","99 -0.160138  0.081797  0.320276   1.224078      0.0 -0.324309      0.0   \n","\n","    Temperature  Pressure  Humidity  Gas_Resistance  Altitude  State  label  \n","0      0.000000  0.000000  0.000000        0.000000  0.000000     -1      0  \n","1      0.000000  0.000000  0.000000        0.000000  0.000000     -1      0  \n","2      0.000000  0.000000  0.000000        0.000000  0.000000     -1      0  \n","3      0.000000  0.000000  0.000000        0.000000  0.000000     -1      0  \n","4      0.000000  0.000000  0.000000        0.000000  0.000000     -1      0  \n","..          ...       ...       ...             ...       ...    ...    ...  \n","95     0.002969  0.014498 -0.183831       14.692660 -0.117737     -1     15  \n","96    -0.020586 -0.002914  0.006184        1.417615  0.025989     -1     15  \n","97    -0.042897  0.013205  0.012974        3.970462 -0.106333     -1     15  \n","98     0.016157  0.004937 -0.104361        3.380810 -0.039666     -1     15  \n","99    -0.040674 -0.023036  0.062811       -7.810392  0.169165     -1     15  \n","\n","[100 rows x 14 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-299-e8f4bfd4bb42>:13: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n","  filtered_groups = combined_df.groupby('label').apply(filter_outliers).reset_index(drop=True)\n"]}]},{"cell_type":"code","source":["scaler = StandardScaler()\n","\n","# Normalize all numerical columns (excluding 'Label' and 'State')\n","numerical_columns = filtered_groups.select_dtypes(include=[np.number]).columns\n","numerical_columns = numerical_columns.drop(['label', 'State'])  # Exclude non-feature columns\n","\n","# Fit and transform the data\n","filtered_groups[numerical_columns] = scaler.fit_transform(filtered_groups[numerical_columns])\n","\n","print(\"\\nNormalized DataFrame:\")\n","print(filtered_groups)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8xRKurrUpbCD","executionInfo":{"status":"ok","timestamp":1742581048659,"user_tz":240,"elapsed":55,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"d01a5f59-dbee-4238-b4f5-e3d1ad8baa8a"},"execution_count":300,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Normalized DataFrame:\n","         NO2    C2H50H       VOC        CO  Alcohol       LPG  Benzene  \\\n","0   0.277555  0.147234  0.270264  0.052851  0.09192  0.153538      0.0   \n","1   0.284866  0.137354  0.262867 -1.463262  0.09192  0.129377      0.0   \n","2   0.278120  0.119490  0.237911 -1.101957  0.09192  0.145913      0.0   \n","3   0.293472  0.144289  0.280942 -0.193645  0.09192  0.156422      0.0   \n","4   0.275178  0.121800  0.224701 -0.666865  0.09192  0.156967      0.0   \n","..       ...       ...       ...       ...      ...       ...      ...   \n","95  0.274229  0.111342  0.228999  0.226373  0.09192  0.017852      0.0   \n","96  0.276699  0.127492  0.235962  0.407550  0.09192  0.142696      0.0   \n","97  0.272803  0.115394  0.233757  0.348316  0.09192 -0.070052      0.0   \n","98  0.283565  0.107967  0.231480  0.302110  0.09192  0.092650      0.0   \n","99  0.279849  0.130169  0.255399  0.555002  0.09192 -0.037009      0.0   \n","\n","    Temperature  Pressure  Humidity  Gas_Resistance  Altitude  State  label  \n","0     -0.080168 -0.025616  0.233606       -0.073161  0.024736     -1      0  \n","1     -0.080168 -0.025616  0.233606       -0.073161  0.024736     -1      0  \n","2     -0.080168 -0.025616  0.233606       -0.073161  0.024736     -1      0  \n","3     -0.080168 -0.025616  0.233606       -0.073161  0.024736     -1      0  \n","4     -0.080168 -0.025616  0.233606       -0.073161  0.024736     -1      0  \n","..          ...       ...       ...             ...       ...    ...    ...  \n","95     0.208943  0.972377 -2.873442        1.141919 -0.966779     -1     15  \n","96    -2.084560 -0.226197  0.338124        0.044075  0.243597     -1     15  \n","97    -4.256911  0.883404  0.452894        0.255195 -0.870747     -1     15  \n","98     1.492977  0.314263 -1.530263        0.206431 -0.309308     -1     15  \n","99    -4.040420 -1.611359  1.295215       -0.719079  1.449351     -1     15  \n","\n","[100 rows x 14 columns]\n"]}]},{"cell_type":"code","source":["def select_median_representative(group, n=1):\n","    median_values = group.median()  # Calculate the median of each feature\n","    distances = np.linalg.norm(group - median_values, axis=1)  # Distance to median\n","    print(distances)\n","    group['distance'] = distances  # Add distances as a temporary column\n","    closest_rows = group.nsmallest(n, 'distance').drop(columns='distance')  # Get n closest rows\n","    return closest_rows"],"metadata":{"id":"az7QFDQ0qD-f","executionInfo":{"status":"ok","timestamp":1742581048687,"user_tz":240,"elapsed":28,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":301,"outputs":[]},{"cell_type":"code","source":["def select_median(group):\n","    # Calculate the median of each feature in the group\n","    median_values = group.median()\n","    return median_values"],"metadata":{"id":"lHCjrQQ9Qum4","executionInfo":{"status":"ok","timestamp":1742581048688,"user_tz":240,"elapsed":16,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":302,"outputs":[]},{"cell_type":"code","source":["label_counts = filtered_groups.groupby('label').size().reset_index(name='count')\n","\n","label_counts"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":551},"id":"MC6xDWIWiKR7","executionInfo":{"status":"ok","timestamp":1742581048689,"user_tz":240,"elapsed":2,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"415f0388-a0f8-4d8e-ff96-d454f1b01d0f"},"execution_count":303,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    label  count\n","0       0      7\n","1       1      4\n","2       2      9\n","3       3      3\n","4       4      8\n","5       5      7\n","6       6      3\n","7       7      3\n","8       8      4\n","9       9      4\n","10     10      5\n","11     11      6\n","12     12      9\n","13     13      3\n","14     14      5\n","15     15     20"],"text/html":["\n","  <div id=\"df-d4cfc3de-58bf-40f0-a964-4950de866ff9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>8</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>9</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>10</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>11</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>12</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>13</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>14</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>15</td>\n","      <td>20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4cfc3de-58bf-40f0-a964-4950de866ff9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d4cfc3de-58bf-40f0-a964-4950de866ff9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d4cfc3de-58bf-40f0-a964-4950de866ff9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bab6d3e2-93bf-4b43-873c-7276574c3655\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bab6d3e2-93bf-4b43-873c-7276574c3655')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bab6d3e2-93bf-4b43-873c-7276574c3655 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2e90c300-ed1a-4b21-b1dc-db07a0bf8761\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('label_counts')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2e90c300-ed1a-4b21-b1dc-db07a0bf8761 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('label_counts');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"label_counts","summary":"{\n  \"name\": \"label_counts\",\n  \"rows\": 16,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 15,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 3,\n        \"max\": 20,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4,\n          5,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":303}]},{"cell_type":"code","source":["sampled_df = filtered_groups.groupby('label').apply(select_median)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6z9lzXearxWs","executionInfo":{"status":"ok","timestamp":1742581048757,"user_tz":240,"elapsed":67,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"b10bffd9-a9c1-4790-fd53-149aeff838c0"},"execution_count":304,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-304-98e66b5c973d>:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n","  sampled_df = filtered_groups.groupby('label').apply(select_median)\n"]}]},{"cell_type":"code","source":["df_tuples = filtered_groups.apply(tuple, axis=1)\n","representatives_tuples = sampled_df.apply(tuple, axis=1)\n","\n","# Get the remaining rows (testing data)\n","remaining_data = filtered_groups[~df_tuples.isin(representatives_tuples)]"],"metadata":{"id":"hUVL7d6G3d5E","executionInfo":{"status":"ok","timestamp":1742581048758,"user_tz":240,"elapsed":2,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":305,"outputs":[]},{"cell_type":"code","source":["remaining_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TfqzvZrs3I0X","executionInfo":{"status":"ok","timestamp":1742581048761,"user_tz":240,"elapsed":4,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"2e2711a3-090a-4860-dd87-ff73ebdf555e"},"execution_count":306,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100, 14)"]},"metadata":{},"execution_count":306}]},{"cell_type":"code","source":["smell_data = sampled_df.drop(['label', 'State'], axis=1).values  # Features\n","y = sampled_df['label'].values  # Labels"],"metadata":{"id":"0dQPD4mZd3HA","executionInfo":{"status":"ok","timestamp":1742581048772,"user_tz":240,"elapsed":10,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":307,"outputs":[]},{"cell_type":"code","source":["gcms_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9vU5NBY4X9ts","executionInfo":{"status":"ok","timestamp":1742581048773,"user_tz":240,"elapsed":10,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"99d597b6-5ae9-4bd4-dea2-7b0fac3fbfb8"},"execution_count":308,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(16, 10)"]},"metadata":{},"execution_count":308}]},{"cell_type":"code","source":["pair_data = []\n","\n","for i in range(len(smell_data)):\n","    pair_data.append((smell_data[i], gcms_data[int(y[i])]))"],"metadata":{"id":"UQ8V8d9od5IL","executionInfo":{"status":"ok","timestamp":1742581048774,"user_tz":240,"elapsed":1,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":309,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","import torch.optim as optim"],"metadata":{"id":"rCaVLlJ4hxz2","executionInfo":{"status":"ok","timestamp":1742581048779,"user_tz":240,"elapsed":4,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":310,"outputs":[]},{"cell_type":"code","source":["def cross_modal_contrastive_loss(z1, z2, temperature=0.07):\n","    \"\"\"\n","    Contrastive loss between two batches of embeddings, z1 and z2.\n","    We treat (z1[i], z2[i]) as the positive pair, and all others as negatives.\n","    \"\"\"\n","    # 1) L2-normalize each embedding\n","    z1 = F.normalize(z1, dim=1)\n","    z2 = F.normalize(z2, dim=1)\n","\n","    batch_size = z1.size(0)\n","\n","    # 2) Similarity matrix: [batch_size, batch_size]\n","    # each entry sim[i, j] = dot(z1[i], z2[j]) / temperature\n","    sim = torch.matmul(z1, z2.t()) / temperature\n","\n","    # 3) For row i, the correct \"label\" is i (the diagonal)\n","    labels = torch.arange(batch_size, device=z1.device)\n","\n","    # 4) Cross entropy loss\n","    # We'll interpret each row i of 'sim' as a distribution over j,\n","    # and the \"correct\" j is i.\n","    loss_12 = F.cross_entropy(sim, labels)\n","    loss_21 = F.cross_entropy(sim.t(), labels)\n","    loss = 0.5 * (loss_12 + loss_21)\n","\n","    return loss"],"metadata":{"id":"qpa9yHBbiisA","executionInfo":{"status":"ok","timestamp":1742581048787,"user_tz":240,"elapsed":9,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":311,"outputs":[]},{"cell_type":"code","source":["class PairedDataset(Dataset):\n","    \"\"\"\n","    Expects 'data' to be a list (or array-like) of length N,\n","    where each item is (gcms_vector, smell_vector).\n","\n","    Each vector could be:\n","      - a NumPy array of shape [feature_dim]\n","      - a Python list\n","      - etc.\n","    We'll just return them as Tensors.\n","    \"\"\"\n","    def __init__(self, data):\n","        self.data = data  # data = [(gcms_vec, smell_vec), (gcms_vec, smell_vec), ...]\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        gcms_vec, smell_vec = self.data[idx]\n","\n","        # Convert to torch.FloatTensors (if they aren't already)\n","        gcms_vec = torch.tensor(gcms_vec, dtype=torch.float)\n","        smell_vec = torch.tensor(smell_vec, dtype=torch.float)\n","\n","        return gcms_vec, smell_vec\n"],"metadata":{"id":"B6pfMxjajCzt","executionInfo":{"status":"ok","timestamp":1742581048788,"user_tz":240,"elapsed":10,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":312,"outputs":[]},{"cell_type":"code","source":["dataset = PairedDataset(pair_data)\n","dataloader = DataLoader(dataset, batch_size=16, shuffle=True)"],"metadata":{"id":"G8iWUS0TjhBM","executionInfo":{"status":"ok","timestamp":1742581048813,"user_tz":240,"elapsed":35,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":313,"outputs":[]},{"cell_type":"code","source":["print(gcms_data.shape)\n","print(smell_data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OVtiUwdvmMXF","executionInfo":{"status":"ok","timestamp":1742581048820,"user_tz":240,"elapsed":10,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"8eecef4d-48fa-46ff-c439-e81c73600916"},"execution_count":314,"outputs":[{"output_type":"stream","name":"stdout","text":["(16, 10)\n","(16, 12)\n"]}]},{"cell_type":"code","source":["# Example hyperparams\n","gcms_input_dim = gcms_data.shape[1]\n","sensor_input_dim = smell_data.shape[1]\n","embedding_dim = 16  # final output dimension\n","hidden_dim = 128\n","temperature = 0.07\n","num_epochs = 100\n","\n","# Instantiate encoders\n","gcms_encoder = GCMSDataEncoder(gcms_input_dim, hidden_dim, embedding_dim)\n","sensor_encoder = SensorDataEncoder(sensor_input_dim, hidden_dim, embedding_dim)\n","\n","# Put on GPU if available\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","gcms_encoder.to(device)\n","sensor_encoder.to(device)\n","\n","# Define optimizer\n","# We'll optimize both encoders' parameters together\n","params = list(gcms_encoder.parameters()) + list(sensor_encoder.parameters())\n","\n","optimizer = optim.Adam(params, lr=1e-3)\n","\n","# Training loop\n","for epoch in range(num_epochs):\n","    gcms_encoder.train()\n","    sensor_encoder.train()\n","\n","    total_loss = 0.0\n","    for (x_sensor, x_gcms) in dataloader:\n","        x_gcms = x_gcms.to(device)\n","        x_sensor = x_sensor.to(device)\n","\n","        optimizer.zero_grad()\n","\n","        # Forward pass\n","        z_gcms = gcms_encoder(x_gcms)    # shape [batch_size, embedding_dim]\n","        z_sensor = sensor_encoder(x_sensor)\n","\n","        # Contrastive loss\n","        loss = cross_modal_contrastive_loss(z_gcms, z_sensor, temperature)\n","\n","        loss.backward()\n","        optimizer.step()\n","\n","        total_loss += loss.item()\n","\n","    avg_loss = total_loss / len(dataloader)\n","    print(f\"Epoch {epoch+1}/{num_epochs}, Loss: {avg_loss:.4f}\")\n"],"metadata":{"id":"x_br-i8PjMrx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742581049313,"user_tz":240,"elapsed":501,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"0f2d9cce-2259-4c27-ec15-9b6b342812f6"},"execution_count":315,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100, Loss: 3.3574\n","Epoch 2/100, Loss: 3.1570\n","Epoch 3/100, Loss: 2.9702\n","Epoch 4/100, Loss: 2.8162\n","Epoch 5/100, Loss: 2.8175\n","Epoch 6/100, Loss: 2.7301\n","Epoch 7/100, Loss: 2.6505\n","Epoch 8/100, Loss: 2.6194\n","Epoch 9/100, Loss: 2.5993\n","Epoch 10/100, Loss: 2.5735\n","Epoch 11/100, Loss: 2.5463\n","Epoch 12/100, Loss: 2.5257\n","Epoch 13/100, Loss: 2.5046\n","Epoch 14/100, Loss: 2.4680\n","Epoch 15/100, Loss: 2.4195\n","Epoch 16/100, Loss: 2.3711\n","Epoch 17/100, Loss: 2.3223\n","Epoch 18/100, Loss: 2.2637\n","Epoch 19/100, Loss: 2.1991\n","Epoch 20/100, Loss: 2.1409\n","Epoch 21/100, Loss: 2.0881\n","Epoch 22/100, Loss: 2.0288\n","Epoch 23/100, Loss: 1.9685\n","Epoch 24/100, Loss: 1.9096\n","Epoch 25/100, Loss: 1.8346\n","Epoch 26/100, Loss: 1.7526\n","Epoch 27/100, Loss: 1.6634\n","Epoch 28/100, Loss: 1.5589\n","Epoch 29/100, Loss: 1.4547\n","Epoch 30/100, Loss: 1.3410\n","Epoch 31/100, Loss: 1.2301\n","Epoch 32/100, Loss: 1.1322\n","Epoch 33/100, Loss: 1.0658\n","Epoch 34/100, Loss: 1.0774\n","Epoch 35/100, Loss: 0.9775\n","Epoch 36/100, Loss: 0.9527\n","Epoch 37/100, Loss: 0.9253\n","Epoch 38/100, Loss: 0.8677\n","Epoch 39/100, Loss: 0.8343\n","Epoch 40/100, Loss: 0.7772\n","Epoch 41/100, Loss: 0.7440\n","Epoch 42/100, Loss: 0.6908\n","Epoch 43/100, Loss: 0.6663\n","Epoch 44/100, Loss: 0.6344\n","Epoch 45/100, Loss: 0.6181\n","Epoch 46/100, Loss: 0.5818\n","Epoch 47/100, Loss: 0.5799\n","Epoch 48/100, Loss: 0.5594\n","Epoch 49/100, Loss: 0.7117\n","Epoch 50/100, Loss: 0.5506\n","Epoch 51/100, Loss: 0.5094\n","Epoch 52/100, Loss: 0.4866\n","Epoch 53/100, Loss: 0.4751\n","Epoch 54/100, Loss: 0.4393\n","Epoch 55/100, Loss: 0.4200\n","Epoch 56/100, Loss: 0.4293\n","Epoch 57/100, Loss: 0.4602\n","Epoch 58/100, Loss: 0.3900\n","Epoch 59/100, Loss: 0.3940\n","Epoch 60/100, Loss: 0.4368\n","Epoch 61/100, Loss: 0.3567\n","Epoch 62/100, Loss: 0.3995\n","Epoch 63/100, Loss: 0.5211\n","Epoch 64/100, Loss: 0.3538\n","Epoch 65/100, Loss: 0.6767\n","Epoch 66/100, Loss: 0.8169\n","Epoch 67/100, Loss: 0.4741\n","Epoch 68/100, Loss: 0.4740\n","Epoch 69/100, Loss: 0.4993\n","Epoch 70/100, Loss: 0.3935\n","Epoch 71/100, Loss: 0.6123\n","Epoch 72/100, Loss: 0.3626\n","Epoch 73/100, Loss: 0.4484\n","Epoch 74/100, Loss: 0.3799\n","Epoch 75/100, Loss: 0.3489\n","Epoch 76/100, Loss: 0.3972\n","Epoch 77/100, Loss: 0.3706\n","Epoch 78/100, Loss: 0.3246\n","Epoch 79/100, Loss: 0.3338\n","Epoch 80/100, Loss: 0.3507\n","Epoch 81/100, Loss: 0.3182\n","Epoch 82/100, Loss: 0.2803\n","Epoch 83/100, Loss: 0.3083\n","Epoch 84/100, Loss: 0.2908\n","Epoch 85/100, Loss: 0.2702\n","Epoch 86/100, Loss: 0.2675\n","Epoch 87/100, Loss: 0.2694\n","Epoch 88/100, Loss: 0.2588\n","Epoch 89/100, Loss: 0.2509\n","Epoch 90/100, Loss: 0.2580\n","Epoch 91/100, Loss: 0.2350\n","Epoch 92/100, Loss: 0.2360\n","Epoch 93/100, Loss: 0.2329\n","Epoch 94/100, Loss: 0.2296\n","Epoch 95/100, Loss: 0.2202\n","Epoch 96/100, Loss: 0.2152\n","Epoch 97/100, Loss: 0.2151\n","Epoch 98/100, Loss: 0.2101\n","Epoch 99/100, Loss: 0.2039\n","Epoch 100/100, Loss: 0.2016\n"]}]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix\n","\n","def evaluate_retrieval(test_smell_data, test_smell_label, gcms_encoder, sensor_encoder, device='cpu'):\n","    \"\"\"\n","    Evaluate how well the model matches GCMS embeddings to sensor embeddings.\n","    We'll compute:\n","      - embeddings for all GCMS data\n","      - embeddings for all sensor data\n","    Then for each GCMS embedding, we find the most similar sensor embedding\n","    and check if it's the correct one (same sample index).\n","\n","    This returns the \"retrieval accuracy\" (% of rows i where argmax similarity == i).\n","\n","    Parameters:\n","      test_loader: a DataLoader that yields (x_gcms, x_sensor) for test samples.\n","                   We assume each batch is aligned so sample i in both is the \"same\" sample.\n","      gcms_encoder, sensor_encoder: your trained PyTorch encoders\n","      device: 'cpu' or 'cuda'\n","    \"\"\"\n","    gcms_encoder.eval()\n","    sensor_encoder.eval()\n","\n","    # We'll store all embeddings in lists, then concatenate.\n","    all_z_gcms = []\n","    all_z_sensor = []\n","\n","    testing_gcms_data = torch.tensor(gcms_data, dtype=torch.float).to(device)\n","    gcms_embeddings = gcms_encoder(testing_gcms_data)\n","    z_gcms = F.normalize(gcms_embeddings, dim=1)\n","\n","    test_smell_data = torch.tensor(test_smell_data, dtype=torch.float).to(device)\n","    smell_embeddings = sensor_encoder(test_smell_data)\n","    z_smell = F.normalize(smell_embeddings, dim=1)\n","\n","    sim = torch.matmul(z_smell, z_gcms.T)\n","\n","    print(f\"Similarity matrix shape: {sim.shape}\")\n","\n","    # For each row i, find the column j with the highest similarity\n","    # If j == i, it means we matched the correct sensor embedding\n","    predicted = sim.argmax(dim=1)  # [N]\n","\n","    print(\"------------------Predictions---------------------\")\n","    print(predicted)\n","\n","    # Compare with the \"ground truth\" index = i\n","    correct = (predicted == test_smell_label)\n","    accuracy = correct.float().mean().item()\n","\n","    precision = precision_score(test_smell_label, predicted, average='macro')\n","    recall = recall_score(test_smell_label, predicted, average='macro')\n","    f1 = f1_score(test_smell_label, predicted, average='macro')\n","    conf_matrix = confusion_matrix(test_smell_label, predicted)\n","\n","    print(\"------------------Test Statistics---------------------\")\n","    print(f\"Accuracy: {accuracy:.4f}\")\n","    print(f\"Precision: {precision:.4f}\")\n","    print(f\"Recall: {recall:.4f}\")\n","    print(f\"F1-Score: {f1:.4f}\")\n","    print(\"Confusion Matrix:\")\n","    print(conf_matrix)\n","\n","    return accuracy, conf_matrix\n","\n"],"metadata":{"id":"Wr8IbIkimti0","executionInfo":{"status":"ok","timestamp":1742581049320,"user_tz":240,"elapsed":6,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":316,"outputs":[]},{"cell_type":"code","source":["test_smell_data = remaining_data.drop(['label', 'State'], axis=1).values  # Features\n","test_y = remaining_data['label'].values  # Labels"],"metadata":{"id":"1KhYOcAJYwoJ","executionInfo":{"status":"ok","timestamp":1742581049329,"user_tz":240,"elapsed":0,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":317,"outputs":[]},{"cell_type":"code","source":["print(test_smell_data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6f1Xg7CRY8gl","executionInfo":{"status":"ok","timestamp":1742581049351,"user_tz":240,"elapsed":15,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"1baef08f-7aa0-4743-e985-7d9555831588"},"execution_count":318,"outputs":[{"output_type":"stream","name":"stdout","text":["(100, 12)\n"]}]},{"cell_type":"code","source":["accuracy, conf_matrix = evaluate_retrieval(test_smell_data, test_y, gcms_encoder, sensor_encoder, device=device)\n","print(f\"Test retrieval accuracy: {accuracy*100:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Al1dUrWzmyfc","executionInfo":{"status":"ok","timestamp":1742581049403,"user_tz":240,"elapsed":45,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"153d944d-7e0f-416f-fb47-bb74d5a066ad"},"execution_count":319,"outputs":[{"output_type":"stream","name":"stdout","text":["Similarity matrix shape: torch.Size([100, 16])\n","------------------Predictions---------------------\n","tensor([11,  0,  0,  0,  0,  0,  2,  8,  1,  8,  1,  2,  2,  3,  2,  2,  1,  7,\n","         2,  5,  3,  3,  6, 12, 12, 12, 11, 11,  4, 12, 11,  5,  5,  8,  5, 15,\n","         5,  5,  6,  6,  6,  5,  7,  7,  1, 15,  8, 13,  9,  1,  9,  9,  7, 10,\n","         5,  5, 10, 11, 11, 11, 12, 11, 12,  4, 12, 12, 12, 12, 12, 12, 12, 12,\n","        13, 15,  9, 15, 14, 15, 14, 14,  6, 15,  8,  8,  2,  8,  2,  3, 15,  8,\n","        15,  5,  2,  8,  1,  2,  5,  5,  2,  5])\n","------------------Test Statistics---------------------\n","Accuracy: 0.5000\n","Precision: 0.5675\n","Recall: 0.5613\n","F1-Score: 0.5271\n","Confusion Matrix:\n","[[5 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0]\n"," [0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 0]\n"," [0 1 5 1 0 1 0 1 0 0 0 0 0 0 0 0]\n"," [0 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0]\n"," [0 0 0 0 1 0 0 0 0 0 0 3 4 0 0 0]\n"," [0 0 0 0 0 5 0 0 1 0 0 0 0 0 0 1]\n"," [0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0]\n"," [0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0]\n"," [0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 1]\n"," [0 1 0 0 0 0 0 0 0 3 0 0 0 0 0 0]\n"," [0 0 0 0 0 2 0 1 0 0 2 0 0 0 0 0]\n"," [0 0 0 0 0 0 0 0 0 0 0 4 2 0 0 0]\n"," [0 0 0 0 1 0 0 0 0 0 0 0 8 0 0 0]\n"," [0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1]\n"," [0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 2]\n"," [0 1 5 1 0 4 1 0 5 0 0 0 0 0 0 3]]\n","Test retrieval accuracy: 50.00%\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","def analyze_confusion_matrix(conf_matrix):\n","    num_classes = conf_matrix.shape[0]\n","    class_metrics = {}\n","\n","    # Calculate metrics for each class\n","    for i in range(num_classes):\n","        # True Positives (TP): Correct predictions for class i\n","        num_predictions = np.sum(conf_matrix[i])\n","        TP = conf_matrix[i, i]\n","\n","        # False Positives (FP): Sum of column i (excluding TP)\n","        FP = np.sum(conf_matrix[:, i]) - TP\n","\n","        # False Negatives (FN): Sum of row i (excluding TP)\n","        FN = np.sum(conf_matrix[i, :]) - TP\n","\n","        # True Negatives (TN): Sum of all elements except row i and column i\n","        TN = np.sum(conf_matrix) - (TP + FP + FN)\n","\n","        # Calculate metrics\n","        accuracy = (TP + TN) / (TP + TN + FP + FN) if (TP + TN + FP + FN) != 0 else 0\n","        precision = TP / num_predictions\n","\n","        # Store metrics for the class\n","        class_metrics[available_food_names[i]] = {\n","            \"Accuracy\": precision,\n","        }\n","\n","    return class_metrics"],"metadata":{"id":"ZPFKoNGdrotv","executionInfo":{"status":"ok","timestamp":1742581049424,"user_tz":240,"elapsed":10,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":320,"outputs":[]},{"cell_type":"code","source":["analyze_confusion_matrix(conf_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5f0Y0Ve1r844","executionInfo":{"status":"ok","timestamp":1742581049510,"user_tz":240,"elapsed":37,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"885f1c64-7f5e-4b2c-cbb4-22c8c57fd42f"},"execution_count":321,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'apple_juice': {'Accuracy': np.float64(0.7142857142857143)},\n"," 'basil': {'Accuracy': np.float64(0.5)},\n"," 'black_pepper': {'Accuracy': np.float64(0.5555555555555556)},\n"," 'chicken_stock': {'Accuracy': np.float64(0.6666666666666666)},\n"," 'chili_powder': {'Accuracy': np.float64(0.125)},\n"," 'cloves': {'Accuracy': np.float64(0.7142857142857143)},\n"," 'coffee_beans': {'Accuracy': np.float64(1.0)},\n"," 'cumin': {'Accuracy': np.float64(0.6666666666666666)},\n"," 'garlic_powder': {'Accuracy': np.float64(0.25)},\n"," 'mint_leaves': {'Accuracy': np.float64(0.75)},\n"," 'nutmeg': {'Accuracy': np.float64(0.4)},\n"," 'onion_powder': {'Accuracy': np.float64(0.6666666666666666)},\n"," 'oregano': {'Accuracy': np.float64(0.8888888888888888)},\n"," 'paprika': {'Accuracy': np.float64(0.3333333333333333)},\n"," 'peanut_butter': {'Accuracy': np.float64(0.6)},\n"," 'ambient': {'Accuracy': np.float64(0.15)}}"]},"metadata":{},"execution_count":321}]},{"cell_type":"code","source":["from datetime import datetime"],"metadata":{"id":"XGLhM3yWheQG","executionInfo":{"status":"ok","timestamp":1742581049511,"user_tz":240,"elapsed":1,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":322,"outputs":[]},{"cell_type":"code","source":["print(datetime.now())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nGo-2KbRhxWM","executionInfo":{"status":"ok","timestamp":1742581049513,"user_tz":240,"elapsed":2,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}},"outputId":"47b0fb47-0079-4832-ba51-1d34a08a2c37"},"execution_count":323,"outputs":[{"output_type":"stream","name":"stdout","text":["2025-03-21 18:17:31.470952\n"]}]},{"cell_type":"code","source":["gcms_model_path = f\"/content/drive/My Drive/Smell/Contrastive Learning/gcms_encoder_{datetime.now()}.pt\"\n","sensor_model_path = f\"/content/drive/My Drive/Smell/Contrastive Learning/sensor_encoder_{datetime.now()}.pt\"\n","\n","torch.save(gcms_encoder.state_dict(), gcms_model_path)\n","torch.save(sensor_encoder.state_dict(), sensor_model_path)"],"metadata":{"id":"H62AfHhgpJQS","executionInfo":{"status":"ok","timestamp":1742581049519,"user_tz":240,"elapsed":6,"user":{"displayName":"Dewei Feng","userId":"02288685149814025323"}}},"execution_count":324,"outputs":[]}]}